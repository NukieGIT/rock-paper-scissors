:root{
    --applyButtonHeight: 10px;
    --keyBindsButtonHeight: 5px;
}
*{
    font-family: 'Comfortaa', cursive;
}
body{
    margin: 0;
    background-color: darkslategray;
    overflow: hidden;
}

.preloader{
    transition: none !important;
    animation: none !important;
}

.container {
    display: grid;
    grid-template-columns: auto auto auto auto;
    grid-template-rows: auto auto;
    gap: 10px 10px;
    grid-auto-flow: row;
    grid-template-areas:
      "result result result result"
      "player player pc pc";
    justify-items: center;
}
  
  .result { grid-area: result; text-align: center; width: 100vw;}
  
  .player { grid-area: player; width: 200px;}
  
  .pc { grid-area: pc; width: 200px;}
  
  .backButton{
    position: absolute;
    font-size: 5em;
    left: 30px;
    top: 10px;
}

.backButton a, .backButton a:link, .backButton a:visited{
    text-decoration: none;
    color: black;
}

.backButton.animate{
    animation: moveSideways 1s alternate infinite forwards ease-in-out;
}

@keyframes moveSideways {
    0%{
        transform: translateX(0);
    }
    50%{
        transform: translateX(-20px);
    }
    100%{
        transform: translateX(0);
    }
}


.button1{
    width: 100vw;
    height: 300px;
}


.image{
    width: 100%;
    height: auto;

}

.emulateButtons{
    position: absolute;
    display: flex;
    justify-content: center;
    flex-direction: row;
    align-items: center;
    top: 600px;
    width: 100vw;
    height: 0;
    opacity: 0;
    gap: 10px;
}

.emulateButtons.show{
    height: 50px;
    opacity: 1;
}

.emulateButton{
    position: relative;
    background-color: rgb(12, 179, 179);
    width: 100px;
    height: 50px;
    min-height: 50px;
    outline: none;
    border: 1px solid black;
    transition: transform .15s ease-in-out, border-color .15s ease-in-out;
    border-radius: 20px;
}

.emulateButton:hover{
    transform: scale(1.1) rotate(5deg);
    perspective: 1px;
    border-color: white;
}

@media (max-width: 500px) {
    .emulateButtons{
        flex-direction: column;
    }
}

.los, .losResult{
    width: 100vw;
    height: 50px;
    text-align: center;
}
#but1{
    position: absolute;
    top: 350px;
    background-color: rgb(60, 100, 100);
    border: 0;
    font-size: 40px;
    transition: transform .2s ease-in-out;
}
#but1:hover{
    transform: scale(1.2);
    cursor: pointer;
}
#but1:active{
    transform: scale(1);
}
#winner{
    position: absolute;
    top: 400px;
}
.combo, .combo2{
    height: 50px;
    position: absolute;
    text-align: center;
    top: 450px;
}

.combo{
    width: 50vw;
}
.combo2{
    width: 150vw;
}

#p1Score, #p2Score{
    background-color: rgb(104, 104, 104);
    padding: 5px 0px;
    width: 60px;
    position: static;
    text-align: center;
    display: inline-block;
    border-radius: 20%;
}
.result{
    background-color: rgb(136, 136, 136);
    width: 100%;
}

.imageText{
    text-align: center;
}

.restart{
    overflow: hidden;
    display: flex;
    height: 0;
    opacity: 0;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 1);
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
}

.restart button{
    color: white;
    border: 2px groove black;
    background-color: gray;
    border-radius: 100px;
    font-size: 30px;
    padding: 20px;
    margin-top: 160px;
    transition: all .3s ease-in-out;
}

.restart button:hover{
    color: black;
    border: 2px groove white;
    background-color: darkgray;
}
.settingsIconContainer{
    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 93vh;
}

.settingsIcon{
    height: 60px;
    transition: all 1s cubic-bezier(.47,-0.94,.58,1.89);
    /* animation: scaleDown .3s ease-in-out; */
}

.settingsIcon.spin{
    transform: rotate(180deg);
}

.settings{
    overflow-y: auto;
    display: flex;
    border-top: 1px solid white;
    border-left: 1px solid white;
    border-bottom: 1px solid white;
    opacity: 0;
    flex-direction: column;
    align-items: center;
    background-color: rgba(0, 0, 0, 1);
    border-radius: 20px 20px 20px 20px;
    position: fixed;
    top: 20vh;
    bottom: 20vh;
    right: 75vw;
    padding: 0px 50px 0px 50px;
    transform: translateX(-20vw);
    transition: all 1s ease-in-out;
}

.settings h2:first-child{
    margin-top: 20%;
}

.settings h2{
    color: aquamarine;
    position: relative;

}



    /* toggle switch */


.switch {
    position: relative;
    display: inline-block;
    width: 40px;
    height: 24px;
}

/* Hide default HTML checkbox */
.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

/* The slider */
.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 4px;
    bottom: 4px;
    background-color: rgb(87, 87, 87);
    -webkit-transition: .4s;
    transition: .4s;
}

input:checked + .slider {
    background-color: #88ff64;
}

input:focus + .slider {
    box-shadow: 0 0 1px #88ff64;
}

input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(16px);
}

/* Rounded sliders */
.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}
    
    /* ----------------------------------------------------------------------------------- */
    


.settings.show{
    opacity: 1;
    border-radius: 20px 0px 0px 20px;
    transform: translateX(75vw);

}

.applySettings{
    position: relative;
    outline: none;
    border: 1px solid rgb(212, 255, 92);
    border-radius: 20px;
    /* top: 5%;
    bottom: 5%; */
    margin-top: 5%;
    margin-bottom: 10%;
    padding: var(--applyButtonHeight) calc(var(--applyButtonHeight) * 2) var(--applyButtonHeight) calc(var(--applyButtonHeight) * 2);
    background-color: rgb(0, 158, 0);
    transition: .15s transform ease-in-out, .15s border-color ease-in-out;
}

.applySettings:hover{
    transform: scale(1.1) rotate(5deg);
    perspective: 1px;
    border-color: white;
}

.applySettings:active{
    border: 1px solid white;
}


.keyBinds{
    position: relative;
    outline: none;
    border: 1px solid rgb(255, 132, 224);
    color: white;
    border-radius: 20px;
    /* top: 5%;
    bottom: 5%; */
    margin-top: 5%;
    margin-bottom: 10%;
    padding: var(--keyBindsButtonHeight) calc(var(--keyBindsButtonHeight) * 2) var(--keyBindsButtonHeight) calc(var(--keyBindsButtonHeight) * 2);
    background-color: rgb(111, 49, 255);
    transition: .15s transform ease-in-out, .15s border-color ease-in-out;
}

.keyBinds:hover{
    transform: scale(1.05) rotate(5deg);
    perspective: 1px;
    border-color: white;
}

.keyBindsEditorMenu{
    color: white;
    background-color: black;
    padding: 30px;
    max-width: 400px;
    border-radius: 20px;
    opacity: 0;
}

.keyBindsEditorMenu::backdrop{
    background-color: rgba(0, 0, 0, .8);
    opacity: 0;
}

.keyBindsEditorMenu[open]{
    animation: slideUp .5s forwards ease-in-out, fadeIn .5s forwards ease-in-out;
}

.keyBindsEditorMenu[open]::backdrop{
    animation: fadeIn .5s forwards ease-in-out;
}

.keyBindsEditorMenu[closing]{
    display: block;
    pointer-events: none;
    inset: 0;
    animation: slideDown .5s forwards ease-in-out, fadeOut .5s forwards ease-in-out;
}

.keyBindsEditorMenu[closing]::backdrop{
    animation: fadeOut .5s forwards ease-in-out;
}


@keyframes slideUp {
    from{
        transform: translateY(70vh);
    }
    to{
        opacity: 1;
        transform: translateY(0);
    }
}
@keyframes slideDown {
    from{
        transform: translateY(0);
    }
    to{
        transform: translateY(70vh);
    }
}

@keyframes fadeIn {
    from{
        opacity: 0;
    }
    to{
        opacity: 1;
    }
}
@keyframes fadeOut {
    from{
        opacity: 1;
    }
    to{
        opacity: 0;
    }
}

.keyBindsEditorMenu h1{
    margin: 0 0 40px 0;
}

.applyKeyBindSettingsContainer{
    display: flex;
    justify-content: center;
}

.applyKeyBindSettings{
    position: relative;
    outline: none;
    border: 1px solid rgb(255, 132, 224);
    color: white;
    border-radius: 20px;
    margin-top: 20px;
    padding: var(--keyBindsButtonHeight) calc(var(--keyBindsButtonHeight) * 2) var(--keyBindsButtonHeight) calc(var(--keyBindsButtonHeight) * 2);
    background-color: rgb(111, 49, 255);
    transition: .15s transform ease-in-out, .15s border-color ease-in-out;
}

.applyKeyBindSettings:hover{
    transform: scale(1.05) rotate(5deg);
    perspective: 1px;
    border-color: white;
}

.keyBindInputs{
    display: grid;
    gap: 10px;
}

.keyBindInputs input{
    max-width: 5ch;
    color: white;
    border-radius: 5px;
    background-color: rgb(139, 137, 137);
    border: none;
    float: right;
    clear: both;
    text-align: center;
}

.red{
    color: red !important;
    background-color: rgba(255, 0, 0, 0.185) !important;
}

.keyBindInputs label{
    text-align: left;
}

.userInput{
    color: white;
    background-color: rgb(104, 104, 104);
    padding: 5px 0px;
    width: 50px;
    position: static;
    text-align: right;
    display: inline-block;
    border-radius: 20%;
    border: none;
    transform: translateY(-3px);
}

.winnerText, .highestComboText, .highestComboText2{
    color: white;
}

.restart.show{
    animation: fadeIn 1s ease-in-out;
    animation-fill-mode: forwards;
    height: auto;
}

.restart.hide{
    animation: fadeOut 1s ease-in-out;
    animation-fill-mode: forwards;
    height: 0;
    pointer-events: none;

}

.restart.delay{
    height: auto;
}

.noSelect{
    -webkit-touch-callout: none; /* iOS Safari */
      -webkit-user-select: none; /* Safari */
       -khtml-user-select: none; /* Konqueror HTML */
         -moz-user-select: none; /* Firefox */
          -ms-user-select: none; /* Internet Explorer/Edge */
              user-select: none; /* Non-prefixed version, currently
                                    supported by Chrome and Opera */
}

@keyframes fadeIn {
    from{
        opacity: 0;
    }
    to{
        opacity: 1;
    }
}

@keyframes fadeOut {
    from{
        opacity: 1;
    }
    to{
        opacity: 0
    }
}